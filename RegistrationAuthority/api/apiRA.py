import os
from fastapi import FastAPI, HTTPException, Query
import json
from fetchNewElection import DATA_DIR, NewElectionData, load_election_into_db
from keygen import save_globalinfo_to_db, keygen, save_keys_to_db, notify_ts_and_vs
from generateB0 import generate_ballot0, send_ballotlist_to_votingserver
import psycopg
import httpx
from contextlib import asynccontextmanager

# Defining startup functionality before the application starts:
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Saving group, generator and order to database
    save_globalinfo_to_db()
    # Notify TallyingServer and VotingServer that g and order has been generated to trigger their own keygeneration.
    await notify_ts_and_vs()
    yield # yielding control back to FastApi

app = FastAPI(lifespan=lifespan)

# Track which services have reported
received_keys = {"VS": False, "TS": False}

# Temporary storage for a callback to run when TS and VS public keys are ready
pending_generation = None

@app.get("/health")
def health():
    return {"ok": True}

# Read the new election from the json file using fastapi
# POST endpoint, reads filename from query string ex. name=election1.json
@app.post("/elections/load-file")
def load_election_from_file(name: str = Query(..., description="Filename inside DATA_DIR")):
    global pending_generation

    path = os.path.join(DATA_DIR, name) #builds path in DATA_DIR
    if not os.path.isfile(path):
        raise HTTPException(status_code=404, detail=f"File not found: {path}")
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f) #reads and parses json file

        payload = NewElectionData.model_validate(data) #pyladic validation, converts raw dict into typed NewElectionData
        load_election_into_db(payload) #calls loader to write into the DB, returns small succes msg
        
        # Generate and save voter keys to database
        voter_id_list = [voter.id for voter in payload.voters ]
        election_id = payload.election.id
        voter_info = keygen(voter_id_list, election_id)
        save_keys_to_db(voter_info)

        # Define what should happen once keys are ready
        def do_generation():
            print("keys ready! generating ballot0")
            voter_id_upk_list = [(b, c) for (_, b, c, _) in voter_info]
            ballot0_list = []
            for voter_id, public_key_voter in voter_id_upk_list:
                ballot0 = generate_ballot0(
                    voter_id,
                    public_key_voter,
                    len(payload.candidates),
                )
                ballot0_list.append(ballot0)

            # TODO: send to VS instead of just printing
            for ballot in ballot0_list:
                print(f"Ballot0 generated: {ballot}")
            send_ballotlist_to_votingserver(ballot0_list)

        # Save callback for later
        pending_generation = do_generation

        # If keys are already ready, run immediately
        if all(received_keys.values()):
            pending_generation()
            pending_generation = None

        return {"status": "loaded", "election_id": payload.election.id, "file": name}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/key_ready")
async def key_ready(payload: dict):
    global pending_generation # For postponed generation due to missing TS and VS public_keys
    service = payload.get("service")
    print(f"Key material ready from {service}")
    received_keys[service] = True

    if all(received_keys.values()):
        print("Public keys generated by VS and TS. Ready for commencing elections")
    
    # If election is already loaded and generation is waiting, trigger it. Pending_generation is set when loading election-file if VS and TS public keys are missing.
    if pending_generation and all(received_keys.values()):
        pending_generation()
        pending_generation = None

    return {"ack": True}